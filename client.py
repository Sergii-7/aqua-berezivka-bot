from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram import types, Dispatcher
from create_bot import dp, bot
import client_kb, order_kb, info_kb
from note import num, the_date, chat, FAM, dostavka, text_fire

class FSM_zakaz(StatesGroup):
    Alaska = State()
    Morshinska = State()
    Pompa = State()
    Zametka = State()


@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    user_id = message.from_user.id
    mess = f'–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}!\n' \
           f'–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–∞—à—ñ —Ç–æ–≤–∞—Ä–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É:\n/info\n' \
           f'–©–æ–± –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É\n/order –ó–∞–º–æ–≤–∏—Ç–∏ –≤–æ–¥—É'
    try:
        await bot.send_message(message.from_user.id, mess, reply_markup=client_kb.kb_client)
        await message.delete()
    except:
        await message.reply('–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –æ—Å–æ–±–∏—Å—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è,\
        –Ω–∞–ø–∏—à–∏ –π–æ–º—É:\nhttps://t.me/AquaBerezivkaBot')
    l = set()
    with open('clients.txt', 'r') as f:
        for i in f.read().split(' '):
            l.add(int(i))
    l.add(int(user_id))
    with open('clients.txt', 'w') as f:
        st = str(l)
        for i in st:
            if i in num or i == ' ':
                f.write(str(i))

ame = '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ª–∏—à–µ —Ü–∏—Ñ—Ä—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2 –∞–±–æ 3'
ame2 = "–Ø–∫—â–æ –≤–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ —Ç–∞–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å, "\
       "–∑–≤'—è–∂—ñ—Ç—å—Å—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞ —Ü–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, —â–æ–± " \
       "–æ—Ç—Ä–∏–º–∞—Ç–∏ –º–æ–∂–ª–∏–≤—É –∑–Ω–∏–∂–∫—É:\n@OlgaBeshlyaga"
# –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤
@dp.message_handler(commands=['order', '–ó–∞–º–æ–≤–∏—Ç–∏'], state=None)
async def menu_commands(message: types.Message):
    with open('alaska_price.txt', 'r') as a:
        s = a.read()
    i = '–ê–ª—è—Å–∫–∞'
    q = f'{i} {s} –≥—Ä–Ω\n' \
         f'–ù–∞–ø–∏—à—ñ—Ç—å —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–∫—ñ–ª—å–∫–∏ ' \
         f'–±—É—Ç–ª—ñ–≤ {i} –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∞–º –ø—Ä–∏–≤–µ–∑—Ç–∏.\n' \
         f'–Ø–∫—â–æ –≤–∏ –Ω–µ –ø–ª–∞–Ω—É–≤–∞–ª–∏ –∑–∞–º–æ–≤–ª—è—Ç–∏ –≤–æ–¥—É {i} –Ω–∞–¥—ñ—à–ª—ñ—Ç—å 0'
    with open('–ê–ª—è—Å–∫–∞.png', 'rb') as photo:
        await message.answer_photo(photo, q, reply_markup=order_kb.button_order)
    await message.delete()
    await FSM_zakaz.Alaska.set()

#–í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
@dp.message_handler(state="*", commands=['—Å–∫–∞—Å—É–≤–∞—Ç–∏'])
@dp.message_handler(Text(equals='s', ignore_case=True), state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    c = '–î–æ–±—Ä–µ\nüíôüíõ\n–ë–µ—Ä–µ–∂—ñ—Ç—å —Å–µ–±–µ —Ç–∞ —Å–≤–æ—ó—Ö –±–ª–∏–∑—å–∫–∏—Ö!'
    await message.answer(c, reply_markup=client_kb.kb_client)
    await state.finish()

#–õ–æ–≤–∏–º 1 –æ—Ç–≤–µ—Ç –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
@dp.message_handler(state=FSM_zakaz.Alaska)
async def zakaz_Alaska(message: types.Message, state: FSMContext):
    with open('morshin_price.txt', 'r') as a:
        s = a.read()
    i = '–ú–æ—Ä—à–∏–Ω—Å—å–∫–∞'
    q = f'{i} {s} –≥—Ä–Ω\n' \
        f'–ù–∞–ø–∏—à—ñ—Ç—å —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–∫—ñ–ª—å–∫–∏ ' \
        f'–±—É—Ç–ª—ñ–≤ {i} –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∞–º –ø—Ä–∏–≤–µ–∑—Ç–∏.\n' \
        f'–Ø–∫—â–æ –≤–∏ –Ω–µ –ø–ª–∞–Ω—É–≤–∞–ª–∏ –∑–∞–º–æ–≤–ª—è—Ç–∏ –≤–æ–¥—É {i} –Ω–∞–¥—ñ—à–ª—ñ—Ç—å 0'
    if message.text == '/–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ü—é –ø–æ–∑–∏—Ü—ñ—é':
        async with state.proxy() as data:
            data['Alaska'] = 0
        with open('–ú–æ—Ä—à–∏–Ω—Å–∫–∞—è.png', 'rb') as photo:
            await message.answer_photo(photo, q)
        await FSM_zakaz.next()
    else:
        for x in message.text:
            if x not in num:
                await message.answer(ame)
                break
            elif x in num:
                continue
        if abs(int(message.text)) > 10:
            await message.reply(ame2, reply_markup=client_kb.kb_client)
            await state.finish()
        elif 10 >= int(message.text) >= -10:
            a = abs(int(message.text))
            async with state.proxy() as data:
                data['Alaska'] = a
            with open('–ú–æ—Ä—à–∏–Ω—Å–∫–∞—è.png', 'rb') as photo:
                await message.answer_photo(photo, q)
            await FSM_zakaz.next()

#–õ–æ–≤–∏–º 2 –æ—Ç–≤–µ—Ç –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
@dp.message_handler(state=FSM_zakaz.Morshinska)
async def zakaz_Morshinska(message: types.Message, state: FSMContext):
    with open('pompa_price.txt', 'r') as a:
        s = a.read()
        i = '–ü–æ–º–ø–∞ –º–µ—Ö–∞–Ω—ñ—á–Ω–∞'
        q = f'{i} {s} –≥—Ä–Ω\n' \
            f'–Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏ –ø–æ–º–ø—É, –Ω–∞–ø–∏—à—ñ—Ç—å —Ü–∏—Ñ—Ä—É 1 ' \
            f'(–∞–±–æ —ñ–Ω—à—É –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å).\n' \
            f'–Ø–∫—â–æ –≤–∏ –Ω–µ –ø–ª–∞–Ω—É—î—Ç–µ –∫—É–ø—É–≤–∞—Ç–∏ –ø–æ–º–ø—É, –Ω–∞–ø–∏—à—ñ—Ç—å 0.'
    if message.text == '/–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ü—é –ø–æ–∑–∏—Ü—ñ—é':
        async with state.proxy() as data:
            data['Morshinska'] = 0
        with open('–ü–æ–º–ø–∞.png', 'rb') as photo:
            await message.answer_photo(photo, q)
        await FSM_zakaz.next()
    else:
        for x in message.text:
            if x not in num:
                await message.answer(ame)
                break
            elif x in num:
                continue
        if abs(int(message.text)) > 10:
            await message.reply(ame2, reply_markup=client_kb.kb_client)
            await state.finish()
        elif 10 >= int(message.text) >= -10:
            m = abs(int(message.text))
            async with state.proxy() as data:
                data['Morshinska'] = m
            with open('–ü–æ–º–ø–∞.png', 'rb') as photo:
                await message.answer_photo(photo, q)
            await FSM_zakaz.next()

#–õ–æ–≤–∏–º 3 –æ—Ç–≤–µ—Ç –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
@dp.message_handler(state=FSM_zakaz.Pompa)
async def zakaz_Pompa(message: types.Message, state: FSMContext):
    q = f'–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–∏–º—ñ—Ç–∫—É –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∞—à—É –∞–¥—Ä–µ—Å—É, –∞–±–æ ' \
        f'—â–æ–± –º–∏ –≤–∞–º –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞–ª–∏.\n' \
        f'–Ø–∫—â–æ —É –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∏–º—ñ—Ç–∫–∏, –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ 0 –∞–±–æ -, –∞–±–æ *, –∞–±–æ –±—É–¥—å-—â–æ.'
    if message.text == '/–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ü—é –ø–æ–∑–∏—Ü—ñ—é':
        async with state.proxy() as data:
            data['Pompa'] = 0
        with open('–ø—Ä–∏–º—ñ—Ç–∫–∞.png', 'rb') as photo:
            await message.answer_photo(photo, q)
        await FSM_zakaz.next()
    else:
        for x in message.text:
            if x not in num:
                await message.answer(ame)
                break
            elif x in num:
                continue
        if abs(int(message.text)) > 5:
            await message.reply(ame2, reply_markup=client_kb.kb_client)
            await state.finish()
        elif 5 >= int(message.text) >= -5:
            p = abs(int(message.text))
            async with state.proxy() as data:
                data['Pompa'] = p
            with open('–ø—Ä–∏–º—ñ—Ç–∫–∞.png', 'rb') as photo:
                await message.answer_photo(photo, q)
            await FSM_zakaz.next()

#–õ–æ–≤–∏–º 4 –æ—Ç–≤–µ—Ç –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
@dp.message_handler(state=FSM_zakaz.Zametka)
async def zakaz_Zametka(message: types.Message, state: FSMContext):
    if message.text == '/–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ü—é –ø–æ–∑–∏—Ü—ñ—é':
        async with state.proxy() as data:
            data['Zametka'] = '-'
    elif message.text != '/–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ü—é –ø–æ–∑–∏—Ü—ñ—é':
        async with state.proxy() as data:
            data['Zametka'] = message.text
    async with state.proxy() as base:
        bs = base
    smg = f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user} \n' \
          f'–∑—Ä–æ–±–∏–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n{bs}'
    await bot.send_message(chat, smg)
    alaska = data['Alaska']
    morshin = data['Morshinska']
    pompa = data['Pompa']
    note = data['Zametka']
    with open('alaska_price.txt', 'r') as ap:
        alaska_price = float(ap.read())
    with open('morshin_price.txt', 'r') as mp:
        morshin_price = float(mp.read())
    with open('bottle_price.txt', 'r') as bp:
        bottle_price = float(bp.read())
    with open('pompa_price.txt') as pp:
        pompa_price = float(pp.read())
    total = alaska * alaska_price + morshin * morshin_price \
            + pompa * pompa_price
    bill = f'–§–û–ü –ë–µ—à–ª—è–≥–∞ –ú–∏—Ö–∞–π–ª–æ –ú–∏—Ö–∞–π–ª–æ–≤–∏—á\n' \
           f'IBAN: UA183220010000026006320059503\n' \
           f'–Ü–ü–ù/–Ñ–î–†–ü–û–£: 2116415395\n' \
           f'–º/—Ç +38(098)476-03-68\n\n' \
           f'—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥ {the_date}\n\n' \
           f'–ø–∏—Ç–Ω–∞ –≤–æ–¥–∞ –ê–ª—è—Å–∫–∞ 18,9–ª:\n' \
           f'{alaska} x {alaska_price} –≥—Ä–Ω\n' \
           f'–ø–∏—Ç–Ω–∞ –≤–æ–¥–∞ –ú–æ—Ä—à–∏–Ω—Å—å–∫–∞ 18,9–ª:\n' \
           f'{morshin} x {morshin_price} –≥—Ä–Ω\n' \
           f'–ü–æ–º–ø–∞ –º–µ—Ö–∞–Ω—ñ—á–Ω–∞:\n{pompa} * {pompa_price} –≥—Ä–Ω\n' \
           f'–ø—Ä–∏–º—ñ—Ç–∫–∞:\n- {note} -\n\n' \
           f'—Ä–∞–∑–æ–º: {total} –≥—Ä–Ω\n\n' \
           f'PS: –ø—ñ–¥–≥–æ—Ç—É–π—Ç–∏ *{alaska + morshin}* –ø–æ—Ä–æ–∂–Ω—ñ—Ö –±—É—Ç–ª—ñ–≤ –Ω–∞ –æ–±–º—ñ–Ω. ' \
           f'–∞–±–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —Å—É–º—É –≥—Ä–æ—à–µ–π ' \
           f'—ñ–∑ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É *{bottle_price}* –≥—Ä–Ω –∑–∞ –æ–¥–∏–Ω –±—É—Ç–ª—å.'
    if total == 0:
        await message.answer('–í–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–∞–º–æ–≤–∏–ª–∏. '
                             '–ù–µ –∑–∞—Å–º—É—á—É–π—Ç–µ—Å—å, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.',
                             reply_markup=client_kb.kb_client)
        await state.finish()
    else:
        await message.answer(bill, reply_markup=client_kb.kb_client)
        await state.finish()
        await message.answer(f'–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n'
                             f'{dostavka}'
                             f'\nüíôüíõ\n–ë–µ—Ä–µ–∂—ñ—Ç—å —Å–µ–±–µ —Ç–∞ —Å–≤–æ—ó—Ö –±–ª–∏–∑—å–∫–∏—Ö!')

@dp.message_handler(commands=['info'])
async def menu_commands(message: types.Message):
    info_ = '–í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä, —â–æ —Ü—ñ–∫–∞–≤–∏—Ç—å, –∞–±–æ –º–æ–∂–µ—Ç–µ –≤—ñ–¥—Ä–∞–∑—É –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.'
    await bot.send_message(message.from_user.id, info_, reply_markup=info_kb.button_info)
    await message.delete()

@dp.message_handler(commands=['Fire'])
async def menu_commands(message: types.Message):
    if message.from_user.id in FAM:
        ct2 = ' üíôüíõ'
        ct = text_fire+ct2
        s = set()
        with open('clients.txt', 'r') as f:
            for i in f.read().split(' '):
                s.add(int(i))
        for i in s:
            try:
                await bot.send_message(i, ct)
            except:
                'Chat not found'
        await bot.send_message(chat, f'–±–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤:{s}')
        await message.delete()
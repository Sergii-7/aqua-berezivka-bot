from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from create_bot import dp, bot
from aiogram.dispatcher.filters import Text
from note import FAM, num, the_time, the_date, chat

class FSM_sklad(StatesGroup):
    Alaska = State()
    Morshinska = State()
    Bottle = State()
    Pompa = State()


q = '–ù–∞–ø–∏—à–∏ —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏—à–ª–æ –∏–ª–∏ —É—à–ª–æ\n'\
    '–û—Ç–º–µ–Ω–∞ –Ω–∞–∂–º–∏:\n/cancel'


ame = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–û—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: +10 –∏–ª–∏ -10'

#–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
@dp.message_handler(commands='Sklad', state=None)
async def sklad_start(message: types.Message):
    if message.from_user.id in FAM:
        with open('sklad_Alaska.txt', 'r') as a:
            s = a.read()
        i = '–ê–ª—è—Å–∫–∞'
        q0 = f'–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ {i}\n—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {s}—à—Ç\n'

        await FSM_sklad.Alaska.set()
        with open('–ê–ª—è—Å–∫–∞.png', 'rb') as photo:
            await message.answer_photo(photo, q0 + q)
        await message.delete()

#–í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
@dp.message_handler(state="*", commands='cancel')
@dp.message_handler(Text(equals='s', ignore_case=True), state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
    if message.from_user.id in FAM:
        current_state = await state.get_state()
        if current_state is None:
            return
        c = '–î–æ–±—Ä–µ\nüíô\nüíõ\n–ë–µ—Ä–µ–∂–∏ —Å–µ–±–µ —Ç–∞ —Å–≤–æ—ó—Ö –±–ª–∏–∑—å–∫–∏—Ö!'
        await message.answer(c, reply_markup=client_kb.kb_client)
        await state.finish()

#–õ–æ–≤–∏–º 1 –æ—Ç–≤–µ—Ç –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
@dp.message_handler(state=FSM_sklad.Alaska)
async def sklad_Alaska(message: types.Message, state: FSMContext):
    if message.from_user.id in FAM:
        for x in message.text:
            if x not in num:
                await message.delete()
                await message.answer(ame)
                break
            elif x in num:
                continue
        if int(message.text) > -10000:
            with open('sklad_Morshinska.txt', 'r') as a:
                s = a.read()
            i = '–ú–æ—Ä—à–∏–Ω—Å—å–∫–∞'
            q0 = f'–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ {i}\n—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {s}—à—Ç\n'
            with open('sklad_Alaska.txt', 'r') as a:
                s = int(a.read())
            with open('sklad_Alaska.txt', 'w') as a:
                a.write(str(s + int(message.text)))
            async with state.proxy() as data:
                data['Alaska'] = int(message.text)
            aa = f'=–ø—Ä–∏–Ω—è—Ç–æ=\n–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –ê–ª—è—Å–∫–∞ = {str(s + int(message.text))}—à—Ç'
            await message.reply(aa)
            with open('–ú–æ—Ä—à–∏–Ω—Å–∫–∞—è.png', 'rb') as photo:
                await message.answer_photo(photo, q0 + q)
            await FSM_sklad.next()

#–õ–æ–≤–∏–º 2 –æ—Ç–≤–µ—Ç
@dp.message_handler(state=FSM_sklad.Morshinska)
async def sklad_Morshinska(message: types.Message, state: FSMContext):
    if message.from_user.id in FAM:
        for x in message.text:
            if x not in num:
                await message.delete()
                await message.answer(ame)
                break
            elif x in num:
                continue
        if int(message.text) > -10000:
            with open('sklad_Bottle.txt', 'r') as a:
                s = a.read()
            i = '–ë—É—Ç–ª–∏'
            q0 = f'–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ {i}\n—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {s}—à—Ç\n'
            with open('sklad_Morshinska.txt', 'r') as a:
                s = int(a.read())
            with open('sklad_Morshinska.txt', 'w') as a:
                a.write(str(s + int(message.text)))
            async with state.proxy() as data:
                data['Morshinska'] = int(message.text)
            aa = f'=–ø—Ä–∏–Ω—è—Ç–æ=\n–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –ú–æ—Ä—à–∏–Ω—Å–∫–∞ = {str(int(s) + int(message.text))}—à—Ç'
            await message.reply(aa)
            with open('Bottle.png', 'rb') as photo:
                await message.answer_photo(photo, q0 + q)
            #await message.answer(q0 + q)
            await FSM_sklad.next()

#–õ–æ–≤–∏–º 3 –æ—Ç–≤–µ—Ç
@dp.message_handler(state=FSM_sklad.Bottle)
async def sklad_Bottle(message: types.Message, state: FSMContext):
    if message.from_user.id in FAM:
        for x in message.text:
            if x not in num:
                await message.delete()
                await message.answer(ame)
                break
            elif x in num:
                continue
        if int(message.text) > -10000:
            with open('sklad_Pompa.txt', 'r') as a:
                s = a.read()
            i = '–ü–æ–º–ø'
            q0 = f'–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ {i}\n—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {s}—à—Ç\n'
            with open('sklad_Bottle.txt', 'r') as a:
                s = int(a.read())
            with open('sklad_Bottle.txt', 'w') as a:
                a.write(str(s + int(message.text)))
            async with state.proxy() as data:
                data['Bottle'] = int(message.text)
            aa = f'=–ø—Ä–∏–Ω—è—Ç–æ=\n–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –ë—É—Ç–ª–∏ = {str(int(s) + int(message.text))}—à—Ç'
            await message.reply(aa)
            with open('–ü–æ–º–ø–∞.png', 'rb') as photo:
                await message.answer_photo(photo, q0 + q)
            #await message.answer(q0 + q)
            await FSM_sklad.next()

#–õ–æ–≤–∏–º 4 –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
@dp.message_handler(state=FSM_sklad.Pompa)
async def sklad_Pompa(message: types.Message, state: FSMContext):
    if message.from_user.id in FAM:
        for x in message.text:
            if x not in num:
                await message.delete()
                await message.answer(ame)
                break
            elif x in num:
                continue
        if int(message.text) > -10000:
            with open('sklad_Pompa.txt', 'r') as a:
                s = int(a.read())
            with open('sklad_Pompa.txt', 'w') as a:
                a.write(str(s + int(message.text)))
            async with state.proxy() as data:
                data['Pompa'] = int(message.text)
            aa = f'=–ø—Ä–∏–Ω—è—Ç–æ=\n–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –ü–æ–º–ø = {str(int(s) + int(message.text))}—à—Ç'
            await message.reply(aa)
            async with state.proxy() as base:
                await bot.send_message(chat, f'–°–ö–õ–ê–î –ü—Ä–∏—Ö–æ–¥/–†–∞—Å—Ö–æ–¥ –Ω–∞ {the_date}\n{base}')
                await message.answer('üëç üëå\n–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥—É:\n/Ostatki')
                await state.finish()

#—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥—É:
@dp.message_handler(commands='Ostatki', state=None)
async def sklad_ostatok(message: types.Message):
    if message.from_user.id in FAM:
        with open('sklad_Alaska.txt', 'r') as a:
            a_s = int(a.read())
        with open('alaska_price.txt', 'r') as ap:
            a_p = float(ap.read())
        with open('sklad_Morshinska.txt', 'r') as m:
            m_s = int(m.read())
        with open('morshin_price.txt', 'r') as mp:
            m_p = float(mp.read())
        with open('sklad_Bottle.txt', 'r') as sb:
            s_b = int(sb.read())
        with open('bottle_price.txt', 'r') as bp:
            b_p = float(bp.read())
        with open('sklad_Pompa.txt', 'r') as sp:
            s_p = int(sp.read())
        with open('pompa_price.txt', 'r') as pp:
            p_p = float(pp.read())
        total = a_s*(a_p+b_p) + m_s*(m_p+b_p) + s_b*b_p + s_p*p_p
        sklad = f'–ó–∞–ª–∏—à–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥—ñ Aqua-Berezivka —Å—Ç–∞–Ω–æ–º –Ω–∞:'\
                f'\n—á–∞—Å {the_time} –¥–∞—Ç–∞ {the_date}\n\n'\
                f'–ü–∏—Ç–Ω–∞ –≤–æ–¥–∞ –ê–ª—è—Å–∫–∞ 18,9–ª:\n' \
                f'{a_s} * ({a_p} + {b_p}) –≥—Ä–Ω\n' \
                f'–ü–∏—Ç–Ω–∞ –≤–æ–¥–∞ –ú–æ—Ä—à–∏–Ω—Å—å–∫–∞ 18,9–ª:\n' \
                f'{m_s} * ({m_p} + {b_p}) –≥—Ä–Ω\n' \
                f'–ü–æ—Ä–æ–∂–Ω—ñ–π –±—É—Ç–ª—å 18,9–ª:\n' \
                f'{s_b} * {b_p} –≥—Ä–Ω\n'\
                f'–ü–æ–º–ø–∞ –º–µ—Ö–∞–Ω—ñ—á–Ω–∞:\n' \
                f'{s_p} *{p_p} –≥—Ä–Ω\n\n' \
                f'–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É —Å–∫–ª–∞–¥–∞—î:' \
                f'{total} –≥—Ä–Ω.'
        await message.answer(sklad)
        await message.delete()